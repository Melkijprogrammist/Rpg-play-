using System;

namespace GardenersAdventure
{
    class Program
    {
        static bool hasGreenTreasure = false;

        static void Main(string[] args)
        {
            Console.WriteLine("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ RPG –∏–≥—Ä—É –°–∞–¥–æ–≤–æ–¥—á–µ—Å–∫–∏–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ: –ü–æ–∏—Å–∫ –∑–µ–ª–µ–Ω–æ–≥–æ —Å–æ–∫—Ä–æ–≤–∏—â–∞!");

            Console.WriteLine("You are a skilled gardener on a mission to find the legendary Green Treasure hidden in the enchanted garden.");

            Console.WriteLine("–ö–æ–≥–¥–∞ –≤—ã –Ω–∞—á–∏–Ω–∞–µ—Ç–µ —Å–≤–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ, –≤–∞–º –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —Ç—Ä–∏ –ø—É—Ç–∏: –ø—É—Ç—å —Ü–≤–µ—Ç–æ–≤, –ü—É—Ç—å –¥–µ—Ä–µ–≤—å–µ–≤ –∏ –ü—É—Ç—å –≤–∏–Ω–æ–≥—Ä–∞–¥–Ω—ã—Ö –ª–æ–∑.");

            Console.WriteLine("–ö–∞–∫–æ–π –ø—É—Ç—å –≤—ã –≤—ã–±–µ—Ä–µ—Ç–µ? (1, 2 –∏–ª–∏ 3)");
            int pathChoice = Convert.ToInt32(Console.ReadLine());

            switch (pathChoice)
            {
                case 1:
                    PathOfFlowers();
                    break;
                case 2:
                    PathOfTrees();
                    break;
                case 3:
                    PathOfVines();
                    break;
                default:
                    Console.WriteLine("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å.");
                    break;
            }

            if (hasGreenTreasure)
            {
                Console.WriteLine("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –Ω–∞—à–ª–∏ –ó–µ–ª–µ–Ω–æ–µ —Å–æ–∫—Ä–æ–≤–∏—â–µ –∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Å–≤–æ–∏ –ø–æ–∏—Å–∫–∏!");
            }
            else
            {
                Console.WriteLine("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞–º –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ó–µ–ª–µ–Ω–æ–µ —Å–æ–∫—Ä–æ–≤–∏—â–µ. –£–¥–∞—á–∏ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!");
            }
        }

        static void PathOfFlowers()
        {
            Console.WriteLine("–í—ã –≤—ã–±—Ä–∞–ª–∏ –ü—É—Ç—å –¶–≤–µ—Ç–æ–≤.");

            Console.WriteLine("–í—ã –¥–æ–ª–∂–Ω—ã —Ä–∞–∑–≥–∞–¥–∞—Ç—å –∑–∞–≥–∞–¥–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:");

            Console.WriteLine("–Ø –ª–µ–≥–∫–∞—è, –∫–∞–∫ –ø–µ—Ä—ã—à–∫–æ, –Ω–æ –¥–∞–∂–µ —Å–∞–º—ã–π —Å–∏–ª—å–Ω—ã–π –º—É–∂—á–∏–Ω–∞ –≤ –º–∏—Ä–µ –Ω–µ —Å–º–æ–≥ –±—ã —É–¥–µ—Ä–∂–∞—Ç—å –º–µ–Ω—è –¥–æ–ª—å—à–µ –º–∏–Ω—É—Ç—ã. –∫—Ç–æ —è —Ç–∞–∫–æ–π?");

            string answer = Console.ReadLine();

            if (answer.ToLower() == "breath")
            {
                Console.WriteLine("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã —Ä–∞–∑–≥–∞–¥–∞–ª–∏ –∑–∞–≥–∞–¥–∫—É –∏ –Ω–∞—à–ª–∏ –∫–ª—é—á –∫ –ó–µ–ª–µ–Ω–æ–º—É —Å–æ–∫—Ä–æ–≤–∏—â—É.");

                hasGreenTreasure = true;
            }
            else
            {
                Console.WriteLine("–û—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫, –≤—ã –¥–æ–ª–∂–Ω—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±.");
            }
        }

        static void PathOfTrees()
        {
            Console.WriteLine("–í—ã –≤—ã–±—Ä–∞–ª–∏ –ü—É—Ç—å —Å—Ä–µ–¥–∏ –î–µ—Ä–µ–≤—å–µ–≤.");

            Console.WriteLine("–í—ã –≤—Å—Ç—Ä–µ—á–∞–µ—Ç–µ –≥—Ä—É–ø–ø—É –æ–∑–æ—Ä–Ω—ã—Ö —Ñ–µ–π, –∏–≥—Ä–∞—é—â–∏—Ö –Ω–∞ –¥–µ—Ä–µ–≤—å—è—Ö.");

            Console.WriteLine("–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–≤–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ, –≤—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∏—Ö –≤–æ–ø—Ä–æ—Å:");

            Console.WriteLine("–ß—Ç–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ª—É—á—à–µ –ø–æ –º–µ—Ä–µ –≤—ã—Å—ã—Ö–∞–Ω–∏—è?");

            string answer = Console.ReadLine();

            if (answer.ToLower() == "towel")
            {
                Console.WriteLine("–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –§–µ–∏ –¥–∞—Ä—è—Ç –≤–∞–º –≤–æ–ª—à–µ–±–Ω—ã–π –∫–ª—é—á, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–∫—Ä–æ–µ—Ç –ó–µ–ª–µ–Ω—ã–π —Å—É–Ω–¥—É–∫ —Å —Å–æ–∫—Ä–æ–≤–∏—â–∞–º–∏.");

                hasGreenTreasure = true;
            }
            else
            {
                Console.WriteLine("–û—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±.");
            }
        }

        static void PathOfVines()
        {
            Console.WriteLine("–í—ã –≤—ã–±—Ä–∞–ª–∏ –ü—É—Ç—å –í–∏–Ω–æ–≥—Ä–∞–¥–Ω—ã—Ö –ª–æ–∑.");

            Console.WriteLine("–í—ã –Ω–∞—Ç—ã–∫–∞–µ—Ç–µ—Å—å –Ω–∞ —Ç–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é –¥–≤–µ—Ä—å, —É–≤–∏—Ç—É—é –≤–∏–Ω–æ–≥—Ä–∞–¥–Ω—ã–º–∏ –ª–æ–∑–∞–º–∏.");

            Console.WriteLine("–í—ã –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å–∏–º–≤–æ–ª–∞–º –Ω–∞ –¥–≤–µ—Ä–∏, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –µ–µ –∏ –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å –ó–µ–ª–µ–Ω–æ–µ —Å–æ–∫—Ä–æ–≤–∏—â–µ.");

            Console.WriteLine("–°–∏–º–≤–æ–ª—ã: ‚òòÔ∏è üåø üçÄ");

            string answer = Console.ReadLine();

            if (answer == "üçÄ")
            {
                Console.WriteLine("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –æ—Ç–∫—Ä—ã–ª–∏ –¥–≤–µ—Ä—å –∏ –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ —Å–ø—Ä—è—Ç–∞–Ω–Ω–æ–µ –≤–Ω—É—Ç—Ä–∏ –ó–µ–ª–µ–Ω–æ–µ —Å–æ–∫—Ä–æ–≤–∏—â–µ.");

                hasGreenTreasure = true;
            }
            else
            {
                Console.WriteLine("–û—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±");
            }
        }
    }
}
